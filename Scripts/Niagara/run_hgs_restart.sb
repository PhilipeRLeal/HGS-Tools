#!/bin/bash
# SLURM submission script for SciNet Niagara

## queue/SLURM settings
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=40
#SBATCH --time=24:00:00
# send email if job fails
#SBATCH --mail-user="$EMAIL"
#SBATCH --mail-type=FAIL
# allocation/account
#SBATCH -A "$HGS_ALLOC"
# job name
#SBATCH -J HGS_restart_run
# direct stdout and stderr go into the same file
#SBATCH --output=hgs_restart.%j.out

## machine settings
# load modules for HGS
date
hostname
echo
module purge
module load intel/2017.7
module list
# Intel compiler settings
ulimit -s unlimited
echo

## settings
export JOBSCRIPT=${JOBSCRIPT:-'run_hgs_restart.sb'} # the name of this script - needed for resubmission
export SETTINGS=${SETTINGS:-"hgs_settings.sh"} # source this file to load settings
# N.B.: all of the variables below can be set by the caller using the sbatch --export flag or can be sourced (loaded)
#       from the $SETTINGS file; the values defined below are just default values (that should work for most users);
#       e.g. to source settings from a file and skip runnign Grok, use this: 
#               sbatch --export=SETTINGS='path/to/settings.sh',RUNGROK=FALSE ./run_hgs_restart.sb
# source settings, first from current working directory, then from user's $HOME directory
cd "$SLURM_SUBMIT_DIR"
if [ -n "$SETTINGS" ] && [[ "$SETTINGS" != 'NONE' ]]; then
  if [ -e "$SETTINGS" ]; then 
    echo "Loading settings from file: ${SETTINGS}"
    source "$SETTINGS" 
  elif [ -e "$HOME/$SETTINGS" ]; then 
    echo "Loading settings from file: $HOME/${SETTINGS}"
    source "$HOME/$SETTINGS" 
  else
    echo "No settings file '$SETTINGS' found - using default values."
  fi
  echo
fi
INIDIR=${INIDIR:-"$SLURM_SUBMIT_DIR"}
# restart options
RESTART=${RESTART:-'AUTO'} # indicate if we are restarting a previous run
# valid values: 'AUTO', 'RESTART', and 'FALSE'
RSTINFO=${RSTINFO:-'RESTART_FILE_INFO.dat'} # the restart info file
RSTFILE=${RSTFILE:-''} # the actual restart file (just to check if it is there)
# pre-processing options (for the first start only)
RUNGROK=${RUNGROK:-'RUNGROK'} # to run Grok or not to run Grok (only for non-restarts)
# valid values: 'RUNGROK' and 'FALSE'
GROKEXE=${GROKEXE:-'./grok.x'} # Grok execution command
GROKLOG=${GROKLOG:-'grok.log'} # Grok log file
# HGS run time options
HGSEXE=${HGSEXE:-'./hgs.x'} # HGS execution command
HGSLOG=${HGSLOG:-'hgs.log'} # HGS log file
OMP_NUM_THREADS=${OMP_NUM_THREADS:-$SLURM_CPUS_PER_TASK}
# post-processing options (only after completion)
RUNHSPLOT=${RUNHSPLOT:-'RUNHSPLOT'} # run HS plot or not (only after completion)
# valid values: 'RUNHSPLOT' and 'FALSE'
HSPEXE=${HSPEXE:-'./hsplot.x'} # HSplot execution command
HSPLOG=${HSPLOG:-'hsplot.log'} # HSplot log file

## function definitions

# helper to detect restart mode
function IS_RESTART {
  if [[ $RESTART == 'AUTO' ]]; then
      if [ -e "$RSTINFO" ]; then return 0 # evaluates to true
      else return 1; fi # evaluates to false
  elif [[ $RESTART == 'RESTART' ]]; then return 0 # evaluates to true
  else return 1 # evaluates to false
  fi # if RESTART
} # IS_RESTART

# helper to check if program finished
function IS_NORMAL_EXIT {
  if [ $( tail -n 10 "$1" | grep -ci 'Normal exit' ) -eq 0 ]; then return 1 # means failure/false
  else return 0; fi # 0 exit code means success or true
} # IS_NORMAL_EXIT

# Grok function
function RUN_GROK {
  # automatically figure out restart mode
  if [[ $RESTART == 'AUTO' ]]; then
      if IS_RESTART ; then 
          echo "Detected restart info file '${RSTINFO}' - assuming restart."
      else 
          echo "No restart info file '${RSTINFO}' detected - assuming first start."
      fi # -e RSTINFO
      echo
  fi # if AUTO  
  # check restart option, and run Grok, if necessary
  if ! IS_RESTART ; then
      # if this is the first start of the job, we need to run Grok
      if [[ "$RUNGROK" == 'RUNGROK' ]]; then
          echo "Launching Grok executable:"
          echo "$GROKEXE &> $GROKLOG"
          rm -f GROK_COMPLETED GROK_ERROR GROK_IN_PROGRESS # clean
          touch GROK_IN_PROGRESS # place indicator
          time -p "$GROKEXE" &> "$GROKLOG" 
          echo
          if IS_NORMAL_EXIT "$GROKLOG" ; then
              echo "Grok completed successfully."
              rm GROK_IN_PROGRESS; touch GROK_COMPLETED
          else
              echo "ERROR: Grok execution failed; see log file: ${GROKLOG} - aborting!"
              rm GROK_IN_PROGRESS; touch GROK_ERROR
          fi # Grok 
      fi # RUNGROK
  fi # IS_RESTART
} # RUN_GROK

# HGS execution function
function RUN_HGS {
  # check restart option and files
  if IS_RESTART ; then
    local ABORT='FALSE'
    
    if [ -e "$HGSLOG" ] && IS_NORMAL_EXIT "$HGSLOG" ; then
        echo "HGS already completed successfully; not restarting."
        ABORT='ABORT'
    else
        # check if restart info file is present
        if [ -e "$RSTINFO" ]; then 
            echo "Restart info file '$RSTINFO' found; restarting simulation."
        else
            echo "ERROR: Restart info file '$RSTINFO' not found; cannot restart - aborting!"
            ABORT='ABORT'
        fi # RSTINFO
        # check if binary restart file is present
        if [ -z "$RSTFILE" ]; then 
            echo  # pass
        elif [ -e "$RSTFILE" ]; then 
            echo "Binary restart file '$RSTFILE' also found."
        else
            echo "ERROR: Binary restart file '$RSTFILE' not found; cannot restart - aborting!"
            ABORT='ABORT'
        fi # RSTFILE
    fi # HGS not complete

    # run HGS if indicated
    if [[ "$ABORT" != 'ABORT' ]]; then
        echo
        echo "Launching HGS executable:"
        echo "$HGSEXE &> $HGSLOG"
        rm -f HGS_COMPLETED HGS_ERROR HGS_IN_PROGRESS HGS_RESTART # clean
        touch HGS_IN_PROGRESS # place indicator        
        time -p "$HGSEXE" &> "$HGSLOG"
        echo
        if IS_NORMAL_EXIT "$HGSLOG" ; then
            echo "HGS completed successfully."
            rm HGS_IN_PROGRESS; touch HGS_COMPLETED
        elif [ "$RSTINFO" -nt HGS_IN_PROGRESS ]: then
            rm HGS_IN_PROGRESS; touch HGS_RESTART
        else
            echo "ERROR: HGS execution failed; see log file: ${HGSLOG}!"
            rm HGS_IN_PROGRESS; touch HGS_ERROR
        fi # HGS
    fi # not ABORT

  fi # IS_RESTART
} # RUN_HGS

## prepare HGS execution
# go to execution directory
cd "$INIDIR"

RUN_GROK & # spawn new process; function defined above

# wait for Grok process(es) to finish
wait

## launch HGS
RUN_HGS & # spawn new process; function defined above

# wait for HGS process(es) to finish
wait


## figure out how HGS exited and submit restart job or run HSplot
# check restart info file
if [ -e "$RSTINFO" ]; then NEWRST=$( stat -c %Y "$RSTINFO" )
else NEWRST=0; fi
# first see if HGS fiished, before checking restart file
if [ $( tail -n 10 $HGSLOG | grep -ci 'Normal exit' ) -gt 0 ]; then
	echo "HGS completed successfully."
	echo 
	# after HGS completed successfully, we can run HSplot
	if [[ "$RUNHSPLOT" == 'RUNHSPLOT' ]]; then
		echo "Launching HSplot executable:"
		echo "$HSPEXE &> $HSPLOG"
		time -p "$HSPEXE" &> "$HSPLOG"
		echo
		if [ $( tail -n 10 $HSPLOG | grep -ci 'Normal exit' ) -eq 0 ]; then
			# N.B.: I'm not actually sure if this is what HSplot prints, since I don't use it...
			echo "ERROR: HSplot execution failed; see log file: ${HSPLOG}!"
			exit 1
		else
			echo "HSplot completed successfully."
		fi # HSplot
		echo
	fi # RUNHSPLOT		
elif [ $NEWRST -gt $OLDRST ]; then 
	# a new restart info file was created, so we are not done and need to restart
	echo "A new restart info file was written - submitting another job to restart simulation."
  ## submit same script again, in restart mode with same name and environment
  # jobs have to be submitted from a login node using ssh and environment varibles have to be passed explicitly
  set -x # echo ssh command to inspect environment variable
	ssh nia-login07 "cd '${INIDIR}'; sbatch --export=\
SETTINGS='NONE',\
RESTART='RESTART',\
RSTINFO='${RSTINFO}',\
RSTFILE='${RSTFILE}',\
HGSEXE='${HGSEXE}',\
HGSLOG='${HGSLOG}',\
OMP_NUM_THREADS='${OMP_NUM_THREADS}',\
RUNHSPLOT='${RUNHSPLOT}',\
HSPEXE='${HSPEXE}',\
HSPLOG='${HSPLOG}',\
                                          -J '${SLURM_JOB_NAME}' '${JOBSCRIPT}'" 
  set +x
  # N.B.: since env vars are passed explicitly, the settings file will not be sourced again
else
	echo "ERROR: HGS execution failed; see log file: ${HGSLOG} - aborting!"
  date
	exit 1
fi # HGS exit and $NEWRST -gt $OLDRST

echo 
date
exit 0
